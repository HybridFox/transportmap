version: '3'

x-default-options: &default-options
    # tty: true
    # logging:
    #     options:
    #         max-size: '10m'
    #         max-file: '3'
    networks:
        - transportmap
    build:
        context: .
        dockerfile: Dockerfile.dev
    volumes:
        - ./:/app
        - ./static:/static:delegated
        - node-modules-data:/app/node_modules

x-no-logs: &no-logs
    logging:
        driver: none

services:
#    api:
#        container_name: transportmap-api
#        command: npm run nx run api:serve -- --verbose
#        ports:
#            - 3001:3000
#            - 9229:9229
#        depends_on:
#            - kafka
#            - zookeeper
#            - postgres
#            - mongo
#        env_file:
#            - ./.env/local.env
#        <<: *default-options
#
#    static-processor:
#        container_name: transportmap-sp
#        command: npm run nx run static-processor:serve -- --verbose
#        ports:
#            - 3002:3000
#            - 4002:9229
#        depends_on:
#            - kafka
#            - zookeeper
#            - postgres
#            - mongo
#        env_file:
#            - ./.env/local.env
#        <<: *default-options

    app:
        container_name: transportmap-app
        command: npm run nx run transportmap:serve -- --verbose
        ports:
            - 3000:3000
        networks:
            - transportmap
        <<: *default-options

    postgres:
        image: 'postgres:15.2-alpine'
        container_name: transportmap-postgres
        ports:
            - 5432:5432
        volumes:
            - ./data/postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: transportmap
            POSTGRES_PASSWORD: transportmap
            POSTGRES_DB: transportmap
        networks:
            - transportmap

    mongo:
        image: 'mongo:6.0'
        container_name: transportmap-mongo
        ports:
            - 27017:27017
        volumes:
            - ./data/mongo:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: transportmap
            MONGO_INITDB_ROOT_PASSWORD: transportmap
            MONGO_INITDB_DATABASE: transportmap
        networks:
            - transportmap

    redis:
        image: 'redis:7.0.3-alpine'
        container_name: transportmap-redis
        ports:
            - 6379:6379
        networks:
            - transportmap

    osrm:
        image: 'ghcr.io/project-osrm/osrm-backend:v5.27.1'
        command: osrm-routed --algorithm mld /data/map-data/map.osrm
        container_name: osrm
        ports:
            - 5000:5000
        volumes:
            - ./osm:/data:delegated
        networks:
            - transportmap

    # redis-commander:
    #     container_name: transportmap-redis-commander
    #     image: ghcr.io/joeferner/redis-commander:latest
    #     restart: always
    #     environment:
    #         - REDIS_HOSTS=local:redis:6379
    #     ports:
    #         - 8081:8081
    #     networks:
    #         - transportmap

    zookeeper:
        image: wurstmeister/zookeeper
        container_name: transportmap-zookeeper
        networks:
            - transportmap
        ports:
            - 2181:2181
        <<: *no-logs

    kafka:
        image: wurstmeister/kafka
        container_name: transportmap-kafka
        depends_on:
            - zookeeper
        networks:
            - transportmap
        environment:
            KAFKA_PORT: 9092
            KAFKA_BROKER_ID: 0
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'DOCKER:PLAINTEXT,EXTERNAL:PLAINTEXT,CLIENT:PLAINTEXT'
            KAFKA_LISTENERS: 'DOCKER://:9092,EXTERNAL://:29092,CLIENT://:29093'
            KAFKA_ADVERTISED_LISTENERS: 'DOCKER://host.docker.internal:9092,EXTERNAL://localhost:29092,CLIENT://kafka:29092'
            KAFKA_CREATE_TOPICS: 'transportmap.static-import.stop-time.json:1:1,transportmap.static-import.stop.json:1:1,transportmap.static-import.agency.json:1:1,transportmap.static-import.calendar-date.json:1:1,transportmap.static-import.calendar.json:1:1,transportmap.static-import.route.json:1:1,transportmap.static-import.translation.json:1:1,transportmap.static-import.trip.json:1:1'
            KAFKA_ZOOKEEPER_CONNECT: 'transportmap-zookeeper:2181'
            KAFKA_INTER_BROKER_LISTENER_NAME: 'CLIENT'
        ports:
            - 29092:29092
            - 29093:29093
            - 9092:9092
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        <<: *no-logs

#    kafka-ui:
#        container_name: kafka-ui
#        image: provectuslabs/kafka-ui:latest
#        ports:
#            - 8080:8080
#        depends_on:
#            - kafka
#            - zookeeper
#        networks:
#            - transportmap
#        environment:
#            KAFKA_CLUSTERS_0_NAME: local
#            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: transportmap-kafka:9092

    # collector:
    #     image: otel/opentelemetry-collector-contrib
    #     restart: unless-stopped
    #     container_name: transportmap-collector
    #     command: [--config=/opt/otel-collector-config.yaml]
    #     volumes:
    #         - ./otel-collector-config.yaml:/opt/otel-collector-config.yaml
    #     ports:
    #         - 1888:1888 # pprof extension
    #         - 8888:8888 # Prometheus metrics exposed by the collector
    #         - 8889:8889 # Prometheus exporter metrics
    #         - 13133:13133 # health_check extension
    #         - 4317:4317 # OTLP gRPC receiver
    #         - 4318:4318 # OTLP http receiver
    #         - 55679:55679 # zpages extension
    #     networks:
    #         - transportmap
    #     environment:
    #         OTEL_COLLECTOR_ENDPOINT: tempo-eu-west-0.grafana.net:443
    #         OTEL_COLLECTOR_AUTHORIZATION: Basic XYZ

volumes:
    redis-data:
    node-modules-data:

networks:
    transportmap:
